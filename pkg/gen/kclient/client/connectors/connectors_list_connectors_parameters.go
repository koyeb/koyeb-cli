// Code generated by go-swagger; DO NOT EDIT.

package connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewConnectorsListConnectorsParams creates a new ConnectorsListConnectorsParams object
// with the default values initialized.
func NewConnectorsListConnectorsParams() *ConnectorsListConnectorsParams {
	var (
		typeVarDefault = string("unknown")
	)
	return &ConnectorsListConnectorsParams{
		Type: &typeVarDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewConnectorsListConnectorsParamsWithTimeout creates a new ConnectorsListConnectorsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConnectorsListConnectorsParamsWithTimeout(timeout time.Duration) *ConnectorsListConnectorsParams {
	var (
		typeVarDefault = string("unknown")
	)
	return &ConnectorsListConnectorsParams{
		Type: &typeVarDefault,

		timeout: timeout,
	}
}

// NewConnectorsListConnectorsParamsWithContext creates a new ConnectorsListConnectorsParams object
// with the default values initialized, and the ability to set a context for a request
func NewConnectorsListConnectorsParamsWithContext(ctx context.Context) *ConnectorsListConnectorsParams {
	var (
		typeDefault = string("unknown")
	)
	return &ConnectorsListConnectorsParams{
		Type: &typeDefault,

		Context: ctx,
	}
}

// NewConnectorsListConnectorsParamsWithHTTPClient creates a new ConnectorsListConnectorsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConnectorsListConnectorsParamsWithHTTPClient(client *http.Client) *ConnectorsListConnectorsParams {
	var (
		typeDefault = string("unknown")
	)
	return &ConnectorsListConnectorsParams{
		Type:       &typeDefault,
		HTTPClient: client,
	}
}

/*ConnectorsListConnectorsParams contains all the parameters to send to the API endpoint
for the connectors list connectors operation typically these are written to a http.Request
*/
type ConnectorsListConnectorsParams struct {

	/*Limit
	  (Optional) The number of items to return.

	*/
	Limit *string
	/*NameFilter
	  (Optional) Filter by name.

	*/
	NameFilter *string
	/*Offset
	  (Optional) The offset in the list of item to return.

	*/
	Offset *string
	/*Type
	  (Optional) A way to retrieve connectors only of a specific type.

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) WithTimeout(timeout time.Duration) *ConnectorsListConnectorsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) WithContext(ctx context.Context) *ConnectorsListConnectorsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) WithHTTPClient(client *http.Client) *ConnectorsListConnectorsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) WithLimit(limit *string) *ConnectorsListConnectorsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNameFilter adds the nameFilter to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) WithNameFilter(nameFilter *string) *ConnectorsListConnectorsParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WithOffset adds the offset to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) WithOffset(offset *string) *ConnectorsListConnectorsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithType adds the typeVar to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) WithType(typeVar *string) *ConnectorsListConnectorsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the connectors list connectors params
func (o *ConnectorsListConnectorsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectorsListConnectorsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.NameFilter != nil {

		// query param name_filter
		var qrNameFilter string
		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {
			if err := r.SetQueryParam("name_filter", qNameFilter); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
