// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLogsTailConnectorLogsParams creates a new LogsTailConnectorLogsParams object
// with the default values initialized.
func NewLogsTailConnectorLogsParams() *LogsTailConnectorLogsParams {
	var ()
	return &LogsTailConnectorLogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLogsTailConnectorLogsParamsWithTimeout creates a new LogsTailConnectorLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLogsTailConnectorLogsParamsWithTimeout(timeout time.Duration) *LogsTailConnectorLogsParams {
	var ()
	return &LogsTailConnectorLogsParams{

		timeout: timeout,
	}
}

// NewLogsTailConnectorLogsParamsWithContext creates a new LogsTailConnectorLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewLogsTailConnectorLogsParamsWithContext(ctx context.Context) *LogsTailConnectorLogsParams {
	var ()
	return &LogsTailConnectorLogsParams{

		Context: ctx,
	}
}

// NewLogsTailConnectorLogsParamsWithHTTPClient creates a new LogsTailConnectorLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLogsTailConnectorLogsParamsWithHTTPClient(client *http.Client) *LogsTailConnectorLogsParams {
	var ()
	return &LogsTailConnectorLogsParams{
		HTTPClient: client,
	}
}

/*LogsTailConnectorLogsParams contains all the parameters to send to the API endpoint
for the logs tail connector logs operation typically these are written to a http.Request
*/
type LogsTailConnectorLogsParams struct {

	/*IDOrName
	  The id or name of the connector to tail

	*/
	IDOrName string
	/*Start
	  A timestamp to indicate when to pull the logs from.

	*/
	Start *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) WithTimeout(timeout time.Duration) *LogsTailConnectorLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) WithContext(ctx context.Context) *LogsTailConnectorLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) WithHTTPClient(client *http.Client) *LogsTailConnectorLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDOrName adds the iDOrName to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) WithIDOrName(iDOrName string) *LogsTailConnectorLogsParams {
	o.SetIDOrName(iDOrName)
	return o
}

// SetIDOrName adds the idOrName to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) SetIDOrName(iDOrName string) {
	o.IDOrName = iDOrName
}

// WithStart adds the start to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) WithStart(start *string) *LogsTailConnectorLogsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the logs tail connector logs params
func (o *LogsTailConnectorLogsParams) SetStart(start *string) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *LogsTailConnectorLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param idOrName
	if err := r.SetPathParam("idOrName", o.IDOrName); err != nil {
		return err
	}

	if o.Start != nil {

		// query param start
		var qrStart string
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
