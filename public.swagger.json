{
  "swagger": "2.0",
  "info": {
    "title": "Koyeb Rest API",
    "description": "# Introduction\n\nThe Koyeb API provides a simple way to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. The API has predictable resource-oriented URLs, allowing you to request/retrieve information and execute actions efficiently. \n\nThe API returns JSON-encoded responses and uses standard HTTP response codes, authentication, and verbs. All of the functionality available in the Koyeb Control Panel is also available via the API, allowing you to automate repetitive and complex actions as required.\n\nAll production API requests are made to:\n\n- https://api.koyeb.com/<version>\n\nAll data is sent and received as JSON.\n\n## Constructing Requests\n\nRequests are made of three components:\n\n- Base URL: `https://api.koyeb.com`\n- API Version: `v1`\n- Resource path: `summary`\n\nTo construct a proper request, you need to format the URL as follows:\n\n`https://api.koyeb.com/{version}/{resource}`\n\nExample: `https://api.koyeb.com/v1/storage/summary`\n\nThe following code is an example request to retrieve the account summary.\n\n```\n%curl -H 'Authorization: Bearer 1111-1111-1111-1111-1111' https://api.koyeb.com/v1/storage/summary\n{\n  \"summary\": {\n    \"provider_count\": 0,\n    \"bucket_count\": 0,\n    \"filter_count\": 0,\n    \"workflow_count\": 0,\n    \"object_count\": 0,\n    \"object_size\": 0\n  }\n}\n```\n\n# Authentication\n\nThe Koyeb API uses API keys to authenticate requests. You can view and manage your API keys in the Koyeb Dashboard.\n\nYour API keys carry many privileges. Take care to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, Slack, client-side code, and so forth.\n\nIf you need to authenticate via bearer auth (e.g., for a cross-origin request), use `-H \"Authorization: Bearer 1111-1111-1111-1111-1111\"` instead of `-u 1111-1111-1111-1111-1111`.\n\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n# Errors\n\nWe use conventional HTTP response codes to indicate success or failure of an API request.\n\nIn general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g., a required parameter is missing, resource not found), and codes in the 5xx range indicate an error with our servers.\n\n## HTTP Status Code Summary\n\n- `200 OK` - Everything worked as expected.\n- `400 Bad Request` - Often missing a required parameter.\n- `401 Unauthorized` - No valid API key provided.\n- `402 Request Failed` - Parameters were valid, but the request failed.\n- `403 Forbidden` - Insufficient privileges to access the requested resource.\n- `404 Not Found` - The requested item doesn't exist.\n- `50x` Server errors - something went wrong on the API domain's end.\n\nInput and output data must be valid JSON with the appropriate Content-Type header set.\n\n## Attributes\n\n- code:\n\n  - `invalid_argument`: Occur when your request has invalid parameters.\n  - `unknown_resource`: Occur when the resource doesn't exist.\n  - `authentication_error`: Arise when there is a problem of authentication.\n  - `rate_limit_error`: Too many requests hit the API too quickly.\n  - `authorization_required`: You don't have sufficient right to access the resource.\n  - `api_error`: API errors use in case of problem with api domain's servers (extremely uncommon).\n\n- message:\n\n  - A human-readable error giving more details about the error\n\n- status:\n\n  - The HTTP code returned by the server.\n\n- fields (Optional):\n\n  - An array of parameters with a human-readable message giving more details about the error.\n\n## Errors responses example\n\nResponse 400 (application/json)\n\n```\n{\n  \"status\": 400,\n  \"code\": \"invalid_argument\",\n  \"message\": \"Invalid argument\",\n  \"fields\": [\n    {\n      \"field\": \"service_provider\",\n      \"description\": \"Service provider is required\"\n    }\n  ]\n}\n```\n\nResponse 401 (application/json)\n\n```\n{\n  \"status\": 401,\n  \"code\": \"authentication_error\",\n  \"message\": \"Request unauthenticated with bearer\"\n}\n```\n\nResponse 403 (application/json)\n\n```\n{\n  \"status\": 403,\n  \"code\": \"authentication_required\",\n  \"message\": \"You don't have the requested permission to access to resource.\"\n}\n```\n\n\nResponse 404 (application/json)\n\n```\n{\n  \"status\": 404,\n  \"code\": \"unknown_resource\",\n  \"message\": \"Provider not found\"\n}\n```\n\n# Pagination\n\nAll top-level API resources receive a paginated response. For instance, list Workflows, list Input Sources, and others share a standard structure, taking two parameters: limit and offset.\n\n**Paginated request**\n\nRequests against paginated endpoints accept two query string arguments:\n\n* *limit*, a positive integer lower or equal to 100 to select the number of items to display.\n* *offset*, an integer to indicate the position to start at.\n\nPaginated endpoints usually also accept filters to search and sort results.\nThese filters are documented along with each endpoint documentation.\n",
    "version": "1.0.0"
  },
  "host": "app.koyeb.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "stackDefinitionIntro",
      "x-displayName": "Introduction",
      "description": "A stack is the definition of what you want to do with Koyeb.\nIt is composed of a list of __functions__ that __bind__ to events and __mount__ some stores.\nEverything is defined in this yaml schema.\n\nYou can find plenty of examples in the main [Koyeb documentation](https://www.koyeb.com/docs/stacks/reference).\nThis part of the documentation is only meant to describe in a formal way the different options of a stack.\n"
    },
    {
      "name": "stackDefinition",
      "x-displayName": "Reference",
      "description": "# Stack\n\nYaml definition of the stack.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/stack\" />\n\n# Function\n<SchemaDefinition schemaRef=\"#/components/schemas/function\"/>\n\n## Events\n\nEvents are emitted by systems and functions get triggered as a result of these.\nThe [event documentation](https://www.koyeb.com/docs/stacks/quickstart/bind-store-events) covers events in more depth.\n\n### Store event\n\nRegister for store events\n<SchemaDefinition schemaRef=\"#/components/schemas/storeEvent\" />\n\n### Cloudevent event\n\nRegister for cloud events\n<SchemaDefinition schemaRef=\"#/components/schemas/cloudeventEvent\" />\n\n### Schedule event\n\nRegiser for events emitted at a time frequency\n<SchemaDefinition schemaRef=\"#/components/schemas/scheduleEvent\" />\n\n## Volumes\n\nVolumes are different resources that are exposed as a set of files in your function.\nFor example you can see secrets or stores created with Koyeb.\n\n### Store volume\n\nUse a Koyeb store as a volume.\nBy mounting a store as a volume you'll be provided with temporary credentials.\nThe [store documentation](https://www.koyeb.com/docs/stacks/advanced/access-store-files-from-functions) covers stores in more depth.\n<SchemaDefinition schemaRef=\"#/components/schemas/storeVolume\" />\n\n### Secret volume\n\nUse a Koyeb secret as a volume\n<SchemaDefinition schemaRef=\"#/components/schemas/secretVolume\" />\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "API",
      "tags": [
        "profile",
        "organization",
        "credentials",
        "Secrets",
        "activity",
        "Catalog",
        "stack",
        "Functions",
        "logs",
        "store",
        "S3Credentials",
        "Connectors"
      ]
    },
    {
      "name": "Stack Definition",
      "tags": [
        "stackDefinitionIntro",
        "stackDefinitionExample",
        "stackDefinition"
      ]
    }
  ],
  "paths": {
    "/v1/activities": {
      "get": {
        "operationId": "activity_ListActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/hooks/github/payload": {
      "post": {
        "summary": "Github hook receiver",
        "description": "An implementation of github hooks. The payload is a freefrom JSON and the response will always be empty.",
        "operationId": "hooks_Github",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityGithubHookReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "hooks"
        ],
        "externalDocs": {
          "description": "github documentation",
          "url": "https://developer.github.com/webhooks/"
        }
      }
    },
    "/v1/notifications": {
      "get": {
        "operationId": "activity_ListNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityNotificationList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_read",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mark_seen",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unread",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "unseen",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/account/activities": {
      "get": {
        "operationId": "accountActivities_GetAccountActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "activity"
        ]
      }
    },
    "/v1/account/invite": {
      "post": {
        "operationId": "invite_NewInvite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountInviteUserRequest"
            }
          }
        ],
        "tags": [
          "invite"
        ]
      }
    },
    "/v1/account/login": {
      "post": {
        "summary": "Login user",
        "operationId": "session_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountLoginRequest"
            }
          }
        ],
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/logout": {
      "delete": {
        "summary": "Logout user",
        "operationId": "session_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountLogoutReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/oauth": {
      "get": {
        "summary": "Get OAuth Providers",
        "operationId": "profile_GetOAuthOptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountGetOAuthOptionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "action",
            "description": "Which authentication flow is being initiated.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "signin",
              "signup",
              "register"
            ],
            "default": "signin"
          },
          {
            "name": "metadata",
            "description": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "post": {
        "summary": "Authenticate using OAuth",
        "operationId": "profile_OAuthCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountOAuthCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountOAuthCallbackRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/passwordless_login": {
      "post": {
        "operationId": "session_PasswordlessLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountPasswordlessLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountPasswordlessLoginRequest"
            }
          }
        ],
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/profile": {
      "get": {
        "operationId": "profile_GetCurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountUserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "delete": {
        "operationId": "profile_DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountDeleteAccountReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "put": {
        "operationId": "profile_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountUserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequestUserUpdateBody"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      },
      "patch": {
        "operationId": "profile_UpdateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountUserReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequestUserUpdateBody"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/refresh": {
      "put": {
        "summary": "Refresh token",
        "operationId": "session_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "session"
        ]
      }
    },
    "/v1/account/resend_validation": {
      "post": {
        "operationId": "profile_ResendEmailValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountResendEmailValidationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountResendEmailValidationRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/reset_password": {
      "post": {
        "operationId": "profile_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountResetPasswordReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/signup": {
      "post": {
        "operationId": "profile_Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountNewAccountRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/update_password": {
      "post": {
        "operationId": "profile_UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountUpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/validate/{id}": {
      "post": {
        "operationId": "profile_Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountLoginReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "operationId": "credentials_ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountListCredentialsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "post": {
        "operationId": "credentials_NewCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountNewCredential"
            }
          }
        ],
        "tags": [
          "credentials"
        ]
      }
    },
    "/v1/credentials/{id}": {
      "get": {
        "operationId": "credentials_GetCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "delete": {
        "operationId": "credentials_DeleteCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "put": {
        "operationId": "credentials_UpdateCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountCredential"
            }
          }
        ],
        "tags": [
          "credentials"
        ]
      },
      "patch": {
        "operationId": "credentials_UpdateCredential2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountCredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountCredential"
            }
          }
        ],
        "tags": [
          "credentials"
        ]
      }
    },
    "/v1/github/installation": {
      "get": {
        "summary": "Start github installation",
        "operationId": "organization_GithubInstallation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountGithubInstallationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata",
            "description": "A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/github/installation/callback": {
      "post": {
        "summary": "Github callback for app installation",
        "operationId": "organization_GithubInstallationCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountGithubInstallationCallbackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountGithubInstallationCallbackRequest"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/github/installation/repositories": {
      "get": {
        "summary": "List Github repos of the organization",
        "operationId": "organization_GithubInstallationRepoList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountGithubInstallationRepoListReply"
            }
          },
          "400": {
            "description": "Organization is not linked to a github organization",
            "schema": {
              "$ref": "#/definitions/commonError",
              "example": {
                "status": "400",
                "code": "failed_precondition",
                "message": "No github Installation"
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "The page id (starting from 1): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "perPage",
            "description": "The number of page elements per page (max 100): Maps to: https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "summary": "Get organization",
        "operationId": "organization_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountGetOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "put": {
        "summary": "Update organization",
        "operationId": "organization_UpdateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountUpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountOrganization"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      },
      "patch": {
        "summary": "Update organization",
        "operationId": "organization_UpdateOrganization2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountUpdateOrganizationReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountOrganization"
            }
          }
        ],
        "tags": [
          "organization"
        ]
      }
    },
    "/v1/s3_credentials": {
      "get": {
        "operationId": "s3Credentials_ListS3Credentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountListS3CredentialsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "post": {
        "operationId": "s3Credentials_NewS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountS3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountNewS3Credential"
            }
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      }
    },
    "/v1/s3_credentials/{id}": {
      "get": {
        "operationId": "s3Credentials_GetS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountS3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "delete": {
        "operationId": "s3Credentials_DeleteS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "put": {
        "operationId": "s3Credentials_UpdateS3Credential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountS3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountS3Credential"
            }
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      },
      "patch": {
        "operationId": "s3Credentials_UpdateS3Credential2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountS3CredentialReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountS3Credential"
            }
          }
        ],
        "tags": [
          "s3Credentials"
        ]
      }
    },
    "/v1/catalog/functions": {
      "get": {
        "summary": "Show catalog of functions",
        "operationId": "Catalog_ListCatalogFunctions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListCatalogFunctionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/functions/{name}": {
      "get": {
        "summary": "Fetch an item of the function catalog",
        "operationId": "Catalog_GetCatalogFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetCatalogFunctionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the function",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "An optional function version, if it is not set return the latest.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stacks": {
      "get": {
        "summary": "Show catalog of stacks",
        "operationId": "Catalog_ListCatalogStacks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListCatalogStacksReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stacks/{name}": {
      "get": {
        "summary": "Fetch an item of the stack catalog",
        "operationId": "Catalog_GetCatalogStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetCatalogStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stores": {
      "get": {
        "summary": "Show catalog of stores",
        "operationId": "Catalog_ListCatalogStores",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListCatalogStoresReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/catalog/stores/{name}": {
      "get": {
        "summary": "Fetch an item of the store catalog",
        "operationId": "Catalog_GetCatalogStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCatalogStoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/v1/connectors": {
      "get": {
        "summary": "List connectors",
        "operationId": "Connectors_ListConnectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListConnectorsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "(Optional) The number of items to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "(Optional) The offset in the list of item to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_filter",
            "description": "(Optional) Filter by name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "(Optional) A way to retrieve connectors only of a specific type.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "CLOUDEVENT",
              "WEBHOOK"
            ],
            "default": "UNKNOWN"
          }
        ],
        "tags": [
          "Connectors"
        ]
      },
      "post": {
        "summary": "Create a new connector",
        "operationId": "Connectors_NewConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageNewConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageConnectorUpsert"
            }
          }
        ],
        "tags": [
          "Connectors"
        ]
      }
    },
    "/v1/connectors/{idOrName}": {
      "get": {
        "summary": "Fetch a connector",
        "operationId": "Connectors_GetConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Connectors"
        ]
      },
      "delete": {
        "summary": "Delete a connector",
        "operationId": "Connectors_DeleteConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageDeleteConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Connectors"
        ]
      },
      "put": {
        "summary": "Update a connector",
        "operationId": "Connectors_UpdateConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageUpdateConnectorReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageConnectorUpsert"
            }
          }
        ],
        "tags": [
          "Connectors"
        ]
      }
    },
    "/v1/secrets": {
      "get": {
        "operationId": "Secrets_ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListSecretsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "post": {
        "operationId": "Secrets_NewSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageNewSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageNewSecret"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}": {
      "get": {
        "operationId": "Secrets_GetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "delete": {
        "operationId": "Secrets_DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageDeleteSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "put": {
        "operationId": "Secrets_UpdateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageUpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageSecret"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      },
      "patch": {
        "operationId": "Secrets_UpdateSecret2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageUpdateSecretReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageSecret"
            }
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/secrets/{id}/activities": {
      "get": {
        "summary": "View stack activities",
        "operationId": "Secrets_GetSecretActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Secrets"
        ]
      }
    },
    "/v1/stacks": {
      "get": {
        "summary": "List stacks",
        "operationId": "stack_ListStacks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListStacksReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.type",
            "description": "Where the repo lives.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GITHUB"
            ],
            "default": "GITHUB"
          },
          {
            "name": "repository.name",
            "description": "The url to find the repo (.e.g: koyeb/gateway).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.branch",
            "description": "The branch to track changes on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "post": {
        "summary": "Create a stack",
        "operationId": "stack_NewStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageNewStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageStackUpsert"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{id}": {
      "get": {
        "summary": "Fetch a stack",
        "operationId": "stack_GetStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "delete": {
        "summary": "Delete an existing stack",
        "operationId": "stack_DeleteStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageDeleteStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "put": {
        "summary": "Update an existing stack",
        "operationId": "stack_UpdateStack",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageUpdateStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageStackUpsert"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "patch": {
        "summary": "Update an existing stack",
        "operationId": "stack_UpdateStack2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageUpdateStackReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageStackUpsert"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{id}/activities": {
      "get": {
        "summary": "View stack activities",
        "operationId": "stack_GetStackActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/events": {
      "post": {
        "summary": "Send event to stack",
        "operationId": "stack_NewStackEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageNewStackEventReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/events/tail": {
      "get": {
        "operationId": "logs_TailStackEvents",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/storageEvent"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of storageEvent"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stacks/{stack_id}/executions/{run_id}/cancel": {
      "post": {
        "summary": "Cancel the execution of a function",
        "operationId": "Functions_CancelFunctionExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCancelFunctionExecutionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/executions/{run_id}/retrigger": {
      "post": {
        "summary": "Relaunch the execution of a function",
        "operationId": "Functions_RetryFunctionExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageRetryFunctionExecutionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions": {
      "get": {
        "summary": "List stack revisions",
        "operationId": "stack_ListStackRevisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListStackRevisionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      },
      "post": {
        "summary": "New stack revisions",
        "operationId": "stack_NewStackRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetStackRevisionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageNewStackRevisionRequest"
            }
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}": {
      "get": {
        "summary": "Fetch a stack revision",
        "operationId": "stack_GetStackRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetStackRevisionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/activities": {
      "get": {
        "summary": "Get a stack revision activities",
        "operationId": "stack_GetStackRevisionActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/build/cancel": {
      "post": {
        "summary": "Cancel the execution of a build",
        "operationId": "stack_CancelBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCancelBuildReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/build/retrigger": {
      "post": {
        "summary": "Relaunch the execution of a build",
        "operationId": "stack_RetryBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageRetryBuildReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "stack"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/builds/tail": {
      "get": {
        "operationId": "logs_TailStackRevisionBuildLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/storageLogEntry"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of storageLogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "The name of the stack",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha or :latest to indicate the latest revision",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "A timestamp to indicate when to pull the logs from.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions": {
      "get": {
        "summary": "List functions for a revision",
        "operationId": "Functions_ListFunctions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListFunctionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha of the revision (either short of long form, `:latest` returns the latest deployed revision)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{fn_name}/logs/tail": {
      "get": {
        "operationId": "logs_TailStackRevisionLogsForFunction",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/storageLogEntry"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of storageLogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "The name of the stack",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha or :latest to indicate the latest revision",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fn_name",
            "description": "The name of the function",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "A timestamp.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "event_id",
            "description": "An optional event_id to filter on to only see runs from this id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}": {
      "get": {
        "summary": "Get function",
        "operationId": "Functions_GetFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGetFunctionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha of the revision (either short of long form, `:latest` returns the latest deployed revision)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "function",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}/executions": {
      "get": {
        "summary": "Get the executions of function runs",
        "operationId": "Functions_FetchFunctionExecutions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageFetchFunctionExecutionsReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha of the revision (either short of long form, `:latest` returns the latest deployed revision)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "function",
            "description": "The name of the function or `:all` to get the history for all the functions",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/functions/{function}/invoke": {
      "post": {
        "summary": "Send an event to a specific function",
        "operationId": "Functions_InvokeFunction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageInvokeFunctionReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "function",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Functions"
        ]
      }
    },
    "/v1/stacks/{stack_id}/revisions/{sha}/logs/tail": {
      "get": {
        "operationId": "logs_TailStackRevisionLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/storageLogEntry"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of storageLogEntry"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "The name of the stack",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The sha or :latest to indicate the latest revision",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "A timestamp to indicate when to pull the logs from.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/v1/stores": {
      "get": {
        "operationId": "store_ListStores",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListStoresReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      },
      "post": {
        "operationId": "store_NewStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageStoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageNewStore"
            }
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/stores/{id}": {
      "get": {
        "operationId": "store_GetStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageStoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      },
      "delete": {
        "operationId": "store_DeleteStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      },
      "put": {
        "operationId": "store_UpdateStore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageStoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageStore"
            }
          }
        ],
        "tags": [
          "store"
        ]
      },
      "patch": {
        "operationId": "store_UpdateStore2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageStoreReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageStore"
            }
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/stores/{id}/activities": {
      "get": {
        "operationId": "store_GetStoreActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activityActivityList"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/stores/{id}/status": {
      "post": {
        "operationId": "store_CheckStoreStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "store"
        ]
      }
    },
    "/v1/summary": {
      "get": {
        "operationId": "StorageMetrics_GetStorageSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageStorageSummaryReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "tags": [
          "StorageMetrics"
        ]
      }
    },
    "/v1/validate_yaml": {
      "post": {
        "summary": "Validate a yaml stack",
        "operationId": "Catalog_ValidateYaml",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageValidateYamlReply"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonErrorWithFields"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/commonError"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    }
  },
  "definitions": {
    "activityActivity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/activityObject"
        },
        "object": {
          "$ref": "#/definitions/activityObject"
        },
        "verb": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "activityActivityList": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/activityActivity"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "activityGithubHookReply": {
      "type": "object"
    },
    "activityNotification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "activity": {
          "$ref": "#/definitions/activityActivity"
        },
        "is_read": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_seen": {
          "type": "boolean",
          "format": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "activityNotificationList": {
      "type": "object",
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/activityNotification"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "is_read": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_seen": {
          "type": "boolean",
          "format": "boolean"
        },
        "unread": {
          "type": "integer",
          "format": "int64"
        },
        "unseen": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "activityObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "deleted": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "commonError": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "commonErrorField": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "commonErrorWithFields": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonErrorField"
          }
        }
      }
    },
    "gatewayruntimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "UpdateUserRequestUserUpdateBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "current_password": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "newsletter_subscribed": {
          "type": "boolean",
          "format": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "accountAction": {
      "type": "string",
      "enum": [
        "signin",
        "signup",
        "register"
      ],
      "default": "signin"
    },
    "accountCredential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "accountCredentialReply": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/accountCredential"
        }
      }
    },
    "accountDeleteAccountReply": {
      "type": "object"
    },
    "accountGetOAuthOptionsReply": {
      "type": "object",
      "properties": {
        "oauth_providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountOAuthProvider"
          }
        }
      },
      "description": "A list of providers which you can use for single sign-on."
    },
    "accountGetOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/accountOrganization"
        }
      }
    },
    "accountGithubInstallationCallbackReply": {
      "type": "object"
    },
    "accountGithubInstallationCallbackRequest": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "string"
        },
        "setup_action": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "accountGithubInstallationReply": {
      "type": "object",
      "properties": {
        "app_name": {
          "type": "string",
          "title": "The github app name"
        },
        "app_id": {
          "type": "string",
          "format": "int64",
          "title": "The github app id"
        },
        "url": {
          "type": "string",
          "title": "The url to start the installation flow"
        },
        "state": {
          "type": "string",
          "title": "The state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "accountGithubInstallationRepoListReply": {
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountGithubRepo"
          }
        },
        "installationId": {
          "type": "string"
        }
      }
    },
    "accountGithubRepo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "format": "boolean"
        },
        "description": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        }
      }
    },
    "accountInviteUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "accountListCredentialsReply": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountCredential"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "accountListS3CredentialsReply": {
      "type": "object",
      "properties": {
        "s3_credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountS3Credential"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "accountLoginReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/accountToken"
        }
      }
    },
    "accountLoginRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "accountLogoutReply": {
      "type": "object"
    },
    "accountNewAccountRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com",
        "password": "..."
      },
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Create new account",
      "title": "Create new account",
      "required": [
        "email",
        "password"
      ]
    },
    "accountNewCredential": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "accountNewS3Credential": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "accountOAuthCallbackReply": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/accountToken",
          "title": "A jwt token to be used for session"
        }
      }
    },
    "accountOAuthCallbackRequest": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "title": "The state created at the origin of the OAuth flow"
        },
        "code": {
          "type": "string",
          "title": "The code returned by the OAuth provider"
        }
      }
    },
    "accountOAuthProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The name of the provider (.e.g github, google)"
        },
        "url": {
          "type": "string",
          "title": "The URL to call to initiate the OAuth flow"
        },
        "state": {
          "type": "string",
          "title": "The OAuth state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow"
        }
      }
    },
    "accountOrganization": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "company": {
          "type": "boolean",
          "format": "boolean"
        },
        "vat_number": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        }
      }
    },
    "accountPasswordlessLoginReply": {
      "type": "object"
    },
    "accountPasswordlessLoginRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com"
      },
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "accountPermission": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "accountResendEmailValidationReply": {
      "type": "object"
    },
    "accountResendEmailValidationRequest": {
      "type": "object"
    },
    "accountResetPasswordReply": {
      "type": "object"
    },
    "accountResetPasswordRequest": {
      "type": "object",
      "example": {
        "email": "john@snow.com"
      },
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "accountS3Credential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountPermission"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "accountS3CredentialReply": {
      "type": "object",
      "properties": {
        "s3_credential": {
          "$ref": "#/definitions/accountS3Credential"
        }
      }
    },
    "accountToken": {
      "type": "object",
      "example": {
        "id": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "expires": "0001-01-01T00:00:00Z",
        "user_id": "996d7822-6b58-11e9-956f-32001b70f000",
        "organization_id": "9f33b2c6-6b58-11e9-883c-32001b70f000"
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "accountUpdateOrganizationReply": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/accountOrganization"
        }
      }
    },
    "accountUpdatePasswordRequest": {
      "type": "object",
      "example": {
        "id": "...",
        "password": "..."
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "accountUser": {
      "type": "object",
      "example": {
        "id": "78352123-a06f-4ec2-81ed-27a056725385",
        "email": "john@snow.com",
        "name": "John Snow",
        "status": "ACTIVE",
        "status_message": "active",
        "avatar_url": "https://www.gravatar.com/avatar/00000000000000000000000000000000",
        "verified": true,
        "is_admin": false,
        "is_test": true,
        "two_factor_authentication": false,
        "last_login": "0001-01-01T00:00:00Z",
        "last_login_id": "10.1.1.1",
        "updated_at": "0001-01-01T00:00:00Z",
        "created_at": "0001-01-01T00:00:00Z",
        "default_organization_id": "78352123-a06f-4ec2-81ed-27a056725385",
        "newsletter_subscribed": true
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/accountUserAccountStatus"
        },
        "status_message": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "format": "boolean"
        },
        "two_factor_authentication": {
          "type": "boolean",
          "format": "boolean"
        },
        "last_login": {
          "type": "string",
          "format": "date-time"
        },
        "last_login_ip": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "default_organization_id": {
          "type": "string"
        },
        "newsletter_subscribed": {
          "type": "boolean",
          "format": "boolean"
        },
        "github_id": {
          "type": "string"
        },
        "github_user": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountUserFlags"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Represent a User",
      "title": "User"
    },
    "accountUserAccountStatus": {
      "type": "string",
      "enum": [
        "WARNING",
        "LOCKED",
        "ACTIVE"
      ],
      "default": "WARNING"
    },
    "accountUserFlags": {
      "type": "string",
      "enum": [
        "ADMIN",
        "TEST",
        "RESTRICTED"
      ],
      "default": "ADMIN",
      "title": "- ADMIN: A user is an admin user\n - TEST: A user is a test user\n - RESTRICTED: Whether this account as restricted access"
    },
    "accountUserReply": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/accountUser"
        }
      }
    },
    "commonEmpty": {
      "type": "object"
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n    f {\n      b {\n        d: 1\n        x: 2\n      }\n      c: [1]\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d: 10\n      }\n      c: [2]\n    }\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n    f {\n      b {\n        d: 10\n        x: 2\n      }\n      c: [1, 2]\n    }\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "FunctionRunInfoState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STARTING",
        "RUNNING",
        "FAILED",
        "SUCCEEDED",
        "CANCELLED",
        "TIMEOUT"
      ],
      "default": "UNKNOWN"
    },
    "ParameterParameterType": {
      "type": "string",
      "enum": [
        "STRING",
        "NUMBER",
        "BOOLEAN",
        "LIST",
        "STRUCT"
      ],
      "default": "STRING"
    },
    "SCMReferenceSCMType": {
      "type": "string",
      "enum": [
        "GITHUB",
        "UNKNOWN"
      ],
      "default": "GITHUB"
    },
    "StorageSummaryReplySummary": {
      "type": "object",
      "properties": {
        "store_count": {
          "type": "number",
          "format": "double"
        },
        "stack_count": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageBaseCatalogStatus": {
      "type": "string",
      "enum": [
        "COMING_SOON",
        "ACTIVE",
        "DEPRECATED",
        "DISABLED",
        "UNKNOWN"
      ],
      "default": "COMING_SOON",
      "title": "The status of a catalog entry"
    },
    "storageCancelBuildReply": {
      "type": "object"
    },
    "storageCancelFunctionExecutionReply": {
      "type": "object"
    },
    "storageCatalogFunction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the tag in a slug valid format"
        },
        "display_name": {
          "type": "string",
          "title": "A display name for a stack"
        },
        "short_description": {
          "type": "string",
          "title": "An short description of the stack (<140 characters)"
        },
        "description": {
          "type": "string",
          "title": "A longer description of the stack akin to a README in markdown"
        },
        "icon": {
          "type": "string",
          "title": "An optional url to an icon for this stack (What file format?!)"
        },
        "website": {
          "type": "string",
          "title": "The website to get more info about this function (for example the source code)"
        },
        "status": {
          "$ref": "#/definitions/storageBaseCatalogStatus",
          "title": "The current status on the stack catalog"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A set of tags to identify the catalog"
        },
        "version": {
          "type": "string",
          "title": "The version of the function in semver format: https://semver.org/"
        },
        "image": {
          "type": "string",
          "title": "The image this function will use"
        },
        "template": {
          "type": "string",
          "title": "The template that is used for expanding a catalog function"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageFunctionParameter"
          },
          "title": "A list of parameters for the function"
        }
      }
    },
    "storageCatalogFunctionListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the tag in a slug valid format"
        },
        "display_name": {
          "type": "string",
          "title": "A display name for a stack"
        },
        "short_description": {
          "type": "string",
          "title": "An short description of the stack (<140 characters)"
        },
        "icon": {
          "type": "string",
          "title": "An optional url to an icon for this stack (What file format?!)"
        },
        "website": {
          "type": "string",
          "title": "The website to get more info about this function (for example the source code)"
        },
        "status": {
          "$ref": "#/definitions/storageBaseCatalogStatus",
          "title": "The current status on the stack catalog"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A set of tags to identify the catalog"
        },
        "version": {
          "type": "string",
          "title": "The version of the function in semver format: https://semver.org/"
        },
        "image": {
          "type": "string",
          "title": "The image this function will use"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageFunctionParameter"
          },
          "title": "A list of parameters for the function"
        }
      },
      "title": "A shorter version o a CatalogFunction for listing"
    },
    "storageCatalogStack": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the tag in a slug valid format"
        },
        "display_name": {
          "type": "string",
          "title": "A display name for a stack"
        },
        "short_description": {
          "type": "string",
          "title": "An short description of the stack (<140 characters)"
        },
        "description": {
          "type": "string",
          "title": "A longer description of the stack akin to a README in markdown"
        },
        "icon": {
          "type": "string",
          "title": "An optional url to an icon for this stack (What file format?!)"
        },
        "status": {
          "$ref": "#/definitions/storageBaseCatalogStatus",
          "title": "The current status on the stack catalog"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A set of tags to identify the catalog"
        },
        "source_control_ref": {
          "$ref": "#/definitions/storageSCMReference",
          "title": "A reference to where the stack is defined"
        },
        "is_yaml_only": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether this stack is only a yaml or not (in which case it can be created as a non git managed stack)."
        },
        "yaml": {
          "type": "string",
          "description": "The yaml that is represented the stack."
        }
      },
      "title": "A stack entry in the catalog"
    },
    "storageCatalogStackListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "short_description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/storageBaseCatalogStatus"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source_control_ref": {
          "$ref": "#/definitions/storageSCMReference"
        }
      },
      "title": "A shorter version of a CatalogStack for listing"
    },
    "storageCatalogStore": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "short_description": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/storageBaseCatalogStatus"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageParameter"
          }
        }
      }
    },
    "storageCatalogStoreReply": {
      "type": "object",
      "properties": {
        "catalog_store": {
          "$ref": "#/definitions/storageCatalogStore"
        }
      }
    },
    "storageCommitInfo": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        }
      }
    },
    "storageConnector": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the connector"
        },
        "name": {
          "type": "string",
          "title": "Name of the connector"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was last updated"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was created"
        },
        "url": {
          "type": "string",
          "title": "The url of the connector"
        },
        "type": {
          "$ref": "#/definitions/storageConnectorType",
          "title": "The type of the connector"
        },
        "organization_id": {
          "type": "string",
          "title": "The organisation id of the connector"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "title": "The metadata attached to the type"
        }
      }
    },
    "storageConnectorListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the connector"
        },
        "name": {
          "type": "string",
          "title": "Name of the connector"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was last updated"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the entity was created"
        },
        "url": {
          "type": "string",
          "title": "The url of the connector"
        },
        "type": {
          "$ref": "#/definitions/storageConnectorType",
          "title": "The type of the connector"
        }
      }
    },
    "storageConnectorType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CLOUDEVENT",
        "WEBHOOK"
      ],
      "default": "UNKNOWN"
    },
    "storageConnectorUpsert": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the connector"
        },
        "change_url": {
          "type": "boolean",
          "format": "boolean",
          "title": "Only valid for update (whether or not to regen the url)"
        },
        "type": {
          "$ref": "#/definitions/storageConnectorType",
          "title": "The tyoe of the connector"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "title": "The metadata attached to the type"
        }
      }
    },
    "storageDeleteConnectorReply": {
      "type": "object"
    },
    "storageDeleteSecretReply": {
      "type": "object"
    },
    "storageDeleteStackReply": {
      "type": "object"
    },
    "storageEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "event": {
          "type": "object"
        },
        "data": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageFetchFunctionExecutionsReply": {
      "type": "object",
      "properties": {
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageFunctionRunInfoListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageFunction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/storageFunctionType"
        }
      }
    },
    "storageFunctionExecution": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/FunctionRunInfoState"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "The possibly empty time at which this function started"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "title": "The possibly empty time at which this function stopped"
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "The exitCode of the run, it will be -1 if it's meaningless (.e.g. STARTING, RUNNING states), this only makes sense if the state is FAILED or SUCCEEDED (succeeded will always be 0)"
        }
      }
    },
    "storageFunctionListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/storageFunctionType"
        }
      }
    },
    "storageFunctionParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the parameter"
        },
        "description": {
          "type": "string",
          "title": "A description of this parameter"
        },
        "required": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether or not this parameter must be set"
        },
        "type": {
          "$ref": "#/definitions/storageFunctionParameterType",
          "title": "The type of the parameter"
        },
        "default": {
          "type": "object"
        }
      }
    },
    "storageFunctionParameterType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "STORE_REF",
        "SECRET_REF",
        "STRING",
        "NUMBER",
        "BOOLEAN"
      ],
      "default": "UNKNOWN",
      "title": "- UNKNOWN: Only used for error handling\n - STORE_REF: A reference to an existing store\n - SECRET_REF: A reference to an existing secret"
    },
    "storageFunctionRunInfoListItem": {
      "type": "object",
      "properties": {
        "run_id": {
          "type": "string"
        },
        "event_id": {
          "type": "string"
        },
        "fn_name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/FunctionRunInfoState"
        },
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageFunctionExecution"
          },
          "description": "A list of executions, with the first one being the most recent one."
        }
      }
    },
    "storageFunctionType": {
      "type": "string",
      "enum": [
        "DOCKER",
        "CATALOG",
        "CODE"
      ],
      "default": "DOCKER"
    },
    "storageGetCatalogFunctionsReply": {
      "type": "object",
      "properties": {
        "catalog_function": {
          "$ref": "#/definitions/storageCatalogFunction"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "storageGetCatalogStackReply": {
      "type": "object",
      "properties": {
        "catalog_stack": {
          "$ref": "#/definitions/storageCatalogStack"
        }
      }
    },
    "storageGetConnectorByUrlReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/storageConnector"
        }
      }
    },
    "storageGetConnectorReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/storageConnector"
        }
      }
    },
    "storageGetFunctionReply": {
      "type": "object",
      "properties": {
        "function": {
          "$ref": "#/definitions/storageFunction"
        }
      }
    },
    "storageGetSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/storageSecret"
        }
      }
    },
    "storageGetStackReply": {
      "type": "object",
      "properties": {
        "stack": {
          "$ref": "#/definitions/storageStack"
        }
      }
    },
    "storageGetStackRevisionReply": {
      "type": "object",
      "properties": {
        "revision": {
          "$ref": "#/definitions/storageStackRevision"
        }
      }
    },
    "storageInvokeFunctionReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "storageListCatalogFunctionsReply": {
      "type": "object",
      "properties": {
        "catalog_functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageCatalogFunctionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageListCatalogStacksReply": {
      "type": "object",
      "properties": {
        "catalog_stacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageCatalogStackListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageListCatalogStoresReply": {
      "type": "object",
      "properties": {
        "catalog_stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageCatalogStore"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageListConnectorsReply": {
      "type": "object",
      "properties": {
        "connectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageConnectorListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "The limit in the request"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "The offset in the request"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of items"
        }
      }
    },
    "storageListFunctionsReply": {
      "type": "object",
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageFunctionListItem"
          }
        }
      }
    },
    "storageListSecretsReply": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageSecret"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageListStackRevisionsReply": {
      "type": "object",
      "properties": {
        "revisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageStackRevisionListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageListStacksReply": {
      "type": "object",
      "properties": {
        "stacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageStackListItem"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageListStoresReply": {
      "type": "object",
      "properties": {
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageStore"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "storageLogEntry": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "stream": {
          "type": "string",
          "title": "The stream (stdout/stderr) this log was emitted to"
        }
      }
    },
    "storageNewConnectorReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/storageConnector"
        }
      }
    },
    "storageNewSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageNewSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/storageSecret"
        }
      }
    },
    "storageNewStackEventReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "storageNewStackReply": {
      "type": "object",
      "properties": {
        "stack": {
          "$ref": "#/definitions/storageStack"
        }
      }
    },
    "storageNewStackRevisionRequest": {
      "type": "object",
      "properties": {
        "stack_id": {
          "type": "string"
        },
        "yaml": {
          "type": "object"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "storageNewStore": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "storageParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean",
          "format": "boolean"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ParameterParameterType"
        },
        "sensitive": {
          "type": "boolean",
          "format": "boolean"
        },
        "options": {
          "type": "object"
        },
        "default": {
          "type": "object"
        }
      }
    },
    "storageRetryBuildReply": {
      "type": "object"
    },
    "storageRetryFunctionExecutionReply": {
      "type": "object"
    },
    "storageSCMReference": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SCMReferenceSCMType",
          "title": "The place where the repository is hosted (github is the only supported place at the moment)"
        },
        "repo": {
          "type": "string",
          "title": "A way to identify the repository within the git provider"
        },
        "ref": {
          "type": "string",
          "title": "A git ref to identify the data that needs to be taken from the repo (it can be a commit, a tag, a branch...)"
        }
      }
    },
    "storageSCMRepository": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/storageSCMRepositoryType",
          "title": "Where the repo lives"
        },
        "name": {
          "type": "string",
          "title": "The url to find the repo (.e.g: koyeb/gateway)"
        },
        "branch": {
          "type": "string",
          "description": "The branch to track changes on."
        }
      }
    },
    "storageSCMRepositoryType": {
      "type": "string",
      "enum": [
        "GITHUB"
      ],
      "default": "GITHUB"
    },
    "storageSecret": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageStack": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the stack"
        },
        "name": {
          "type": "string",
          "title": "The name of the stack"
        },
        "organization_id": {
          "type": "string",
          "title": "The organisation id of the stack"
        },
        "latest_revision": {
          "$ref": "#/definitions/storageStackRevision",
          "title": "The latest definition of the stack"
        },
        "latest_revision_sha": {
          "type": "string",
          "title": "Sha of the latest revision"
        },
        "deployed_revision_sha": {
          "type": "string",
          "title": "Sha of the revision that was successfully deployed"
        },
        "repository": {
          "$ref": "#/definitions/storageSCMRepository",
          "title": "Where is this stack managed in the VCS"
        },
        "status": {
          "$ref": "#/definitions/storageStackStatus"
        },
        "status_message": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "A Stack"
    },
    "storageStackListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "latest_revision_sha": {
          "type": "string"
        },
        "deployed_revision_sha": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/storageStackStatus"
        },
        "repository": {
          "$ref": "#/definitions/storageSCMRepository"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "organization_id": {
          "type": "string"
        }
      },
      "description": "A smaller representation of a stack to use when listing entities."
    },
    "storageStackRevision": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "title": "The sha of the revision"
        },
        "yaml": {
          "type": "string",
          "title": "The raw yaml"
        },
        "version": {
          "type": "string",
          "title": "The version of the schema definition"
        },
        "parent_sha": {
          "type": "string",
          "title": "The sha of the previous revision of this stack (empty if it's the first revision)"
        },
        "status": {
          "$ref": "#/definitions/storageStackRevisionStatus"
        },
        "status_message": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "commit_info": {
          "$ref": "#/definitions/storageCommitInfo",
          "title": "Information about the commit that generated this revision (potentially absent)"
        },
        "releaseId": {
          "type": "string",
          "title": "The release this stack revision was included in (possibly null if not release was done yet)"
        }
      },
      "description": "The actual concrete definition of a stack."
    },
    "storageStackRevisionListItem": {
      "type": "object",
      "properties": {
        "sha": {
          "type": "string",
          "title": "The sha of the revision"
        },
        "version": {
          "type": "string",
          "title": "The version of the schema definition"
        },
        "parent_sha": {
          "type": "string",
          "title": "The sha of the previous revision of this stack (empty if it's the first revision)"
        },
        "status": {
          "$ref": "#/definitions/storageStackRevisionStatus"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "commit_info": {
          "$ref": "#/definitions/storageCommitInfo",
          "title": "Information about the commit that generated this revision (potentially absent)"
        },
        "releaseId": {
          "type": "string",
          "title": "The release this stack revision was included in (possibly null if not release was done yet)"
        }
      }
    },
    "storageStackRevisionStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "UNAVAILABLE",
        "PROVISIONING",
        "STOPPING",
        "ERROR",
        "ACTIVE",
        "VALIDATION_ERROR",
        "STOPPED",
        "BUILDING",
        "BUILD_FAILED"
      ],
      "default": "UNKNOWN",
      "title": "- PROVISIONING: The revision is starting up, events won't be triggered to it\n - STOPPING: The revision is being shutdown, existing runs won't get cancelled but new ones won't be triggered on it.\n - ERROR: An error happened when deploying the new revision or when checking it's availability\n - ACTIVE: The revision is active and everything goes well\n - VALIDATION_ERROR: Indicate that the revision was not valid\n - STOPPED: The revision is fully stopped nothing will get triggered\n - BUILDING: The revision is being built\n - BUILD_FAILED: The revision has failed to build"
    },
    "storageStackStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DRAINING",
        "PROVISIONING",
        "ACTIVE",
        "ERROR",
        "WARNING",
        "DEPLOYING"
      ],
      "default": "UNKNOWN",
      "title": "- UNKNOWN: This shouldn't happen but for API completion\n - DRAINING: The stack is getting deleted\n - PROVISIONING: A stack is starting up but doesn't have a deployed revision yet\n - ACTIVE: Everything is ok\n - ERROR: There's no active release and recent releases have failed\n - WARNING: There's an active release, however the most recent release is unhealthy\n - DEPLOYING: There's an active release, and we're deploying a newer release"
    },
    "storageStackUpsert": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Stack name"
        },
        "repository": {
          "$ref": "#/definitions/storageSCMRepository",
          "title": "Where is this stack managed in the VCS"
        }
      }
    },
    "storageStorageSummaryReply": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/StorageSummaryReplySummary"
        }
      }
    },
    "storageStore": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "with": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "region": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "title": "The url to the storage endpoint"
        },
        "status": {
          "$ref": "#/definitions/storageStoreStatus"
        },
        "status_message": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "store_url": {
          "type": "string",
          "title": "The url to the bucket specifically"
        }
      }
    },
    "storageStoreReply": {
      "type": "object",
      "properties": {
        "store": {
          "$ref": "#/definitions/storageStore"
        }
      }
    },
    "storageStoreStatus": {
      "type": "string",
      "enum": [
        "PROVISIONING",
        "UPDATING",
        "ENABLING",
        "ENABLED",
        "DISABING",
        "DISABLED",
        "LOCKING",
        "LOCKED",
        "ERROR",
        "DELETING",
        "DELETED"
      ],
      "default": "PROVISIONING"
    },
    "storageUpdateConnectorReply": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/storageConnector"
        }
      }
    },
    "storageUpdateSecretReply": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/storageSecret"
        }
      }
    },
    "storageUpdateStackReply": {
      "type": "object",
      "properties": {
        "stack": {
          "$ref": "#/definitions/storageStack"
        }
      }
    },
    "storageValidateYamlReply": {
      "type": "object"
    },
    "stack": {
      "$ref": "stackv1.swagger.build.json"
    },
    "function": {
      "$ref": "stackv1.swagger.build.json#/definitions/function"
    },
    "baseFunction": {
      "$ref": "stackv1.swagger.build.json#/definitions/baseFunction"
    },
    "catalogFunction": {
      "$ref": "stackv1.swagger.build.json#/definitions/catalogFunction"
    },
    "codeFunction": {
      "$ref": "stackv1.swagger.build.json#/definitions/codeFunction"
    },
    "dockerFunction": {
      "$ref": "stackv1.swagger.build.json#/definitions/dockerFunction"
    },
    "volume": {
      "$ref": "stackv1.swagger.build.json#/definitions/volume"
    },
    "baseVolume": {
      "$ref": "stackv1.swagger.build.json#/definitions/baseVolume"
    },
    "secretVolume": {
      "$ref": "stackv1.swagger.build.json#/definitions/secretVolume"
    },
    "storeVolume": {
      "$ref": "stackv1.swagger.build.json#/definitions/storeVolume"
    },
    "env": {
      "$ref": "stackv1.swagger.build.json#/definitions/env"
    },
    "event": {
      "$ref": "stackv1.swagger.build.json#/definitions/event"
    },
    "storeEvent": {
      "$ref": "stackv1.swagger.build.json#/definitions/storeEvent"
    },
    "storeOldEvent": {
      "$ref": "stackv1.swagger.build.json#/definitions/storeOldEvent"
    },
    "scheduleEvent": {
      "$ref": "stackv1.swagger.build.json#/definitions/scheduleEvent"
    },
    "cloudeventEvent": {
      "$ref": "stackv1.swagger.build.json#/definitions/cloudeventEvent"
    }
  }
}