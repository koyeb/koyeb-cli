{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Stack",
  "additionalProperties": false,
  "example": {
    "functions": [
      {
        "name": "my-function",
        "image": "koyeb/cowsay"
      }
    ]
  },
  "properties": {
    "functions": {
      "$id": "#/properties/functions",
      "description": "List of functions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/function"
      }
    }
  },
  "required": [
    "functions"
  ],
  "definitions": {
    "function": {
      "oneOf": [
        {
          "$ref": "#/definitions/dockerFunction"
        },
        {
          "$ref": "#/definitions/codeFunction"
        },
        {
          "$ref": "#/definitions/catalogFunction"
        }
      ]
    },
    "baseFunction": {
      "type": "object",
      "title": "Things common to all functions",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/volume"
          }
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/event"
          }
        }
      }
    },
    "catalogFunction": {
      "title": "Catalog function",
      "description": "A function pre-written in a reusable way and maintained by the community. To see a list of existing ones checkout the [function catalog](https://www.koyeb.com/catalog?refinementList[type][0]=function). Interested in adding one? Go to the [koyeb-community github org](https://github.com/koyeb-community).",
      "allOf": [
        {
          "$ref": "#/definitions/baseFunction"
        },
        {
          "type": "object",
          "required": [
            "use"
          ],
          "properties": {
            "use": {
              "description": "The name and version of the function from the catalog in the format `fnName@version`. To find functions check the [function catalog](https://www.koyeb.com/catalog?refinementList[type][0]=function)",
              "type": "string"
            },
            "with": {
              "type": "object",
              "description": "An object setting the options of a function from the catalog. To see available options check the documentation in the function catalog.",
              "additionalProperties": true
            }
          }
        }
      ]
    },
    "codeFunction": {
      "title": "Code function",
      "allOf": [
        {
          "$ref": "#/definitions/baseFunction"
        },
        {
          "type": "object",
          "required": [
            "runtime"
          ],
          "properties": {
            "runtime": {
              "description": "The runtime to use, to find supported runtimes check the [stack doc.](https://www.koyeb.com/docs/stacks/quickstart)",
              "type": "string"
            },
            "handler": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          }
        }
      ]
    },
    "dockerFunction": {
      "title": "Docker function",
      "allOf": [
        {
          "$ref": "#/definitions/baseFunction"
        },
        {
          "type": "object",
          "required": [
            "name",
            "image"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function"
            },
            "image": {
              "type": "string",
              "description": "The reference to the docker image to use for this function"
            },
            "image_registry_secret": {
              "type": "string",
              "description": "The reference to a Koyeb secret that contains the secret to access to docker-registry the image lives in (only necessary for private Docker image registries)"
            },
            "command": {
              "description": "A command to execute inside the container",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "args": {
              "type": "array",
              "description": "A list of arguments to pass to `command`",
              "items": {
                "type": "string"
              }
            },
            "working_dir": {
              "description": "How to set the cwd on function execution",
              "type": "string"
            }
          }
        }
      ]
    },
    "volume": {
      "title": "Volumes this function will mount",
      "description": "These can be secrets or stores",
      "oneOf": [
        {
          "$ref": "#/definitions/secretVolume"
        },
        {
          "$ref": "#/definitions/storeVolume"
        }
      ]
    },
    "baseVolume": {
      "title": "Configuration common to all volumes",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the volume",
          "type": "string",
          "example": "volume-name"
        },
        "path": {
          "description": "Mount path of volume",
          "type": "string",
          "example": "/test/my-vol"
        }
      }
    },
    "secretVolume": {
      "title": "Mount secret",
      "allOf": [
        {
          "$ref": "#/definitions/baseVolume"
        },
        {
          "type": "object",
          "required": [
            "secret"
          ],
          "properties": {
            "secret": {
              "description": "Name of the secret",
              "type": "string",
              "example": "secret-name"
            }
          }
        }
      ]
    },
    "storeVolume": {
      "title": "Mount store",
      "allOf": [
        {
          "$ref": "#/definitions/baseVolume"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "description": "Name of the store",
              "type": "string",
              "example": "store-name"
            }
          }
        }
      ]
    },
    "env": {
      "oneOf": [
        {
          "title": "Environment",
          "type": "object",
          "additionalProperties": true,
          "example": {
            "MY_ENV": "value"
          }
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "title": "Environement name and value",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Env variable name",
                    "example": "MY_ENV"
                  },
                  "value": {
                    "type": [
                      "number",
                      "string"
                    ]
                  }
                }
              },
              {
                "title": "Environement from secret",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name",
                  "value_from_secret"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Env variable name",
                    "example": "MY_ENV"
                  },
                  "value_from_secret": {
                    "type": "string",
                    "description": "Secret name",
                    "example": "my-secret"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    "event": {
      "title": "Event the function is listening to",
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/definitions/cloudeventEvent"
        },
        {
          "$ref": "#/definitions/storeEvent"
        },
        {
          "$ref": "#/definitions/storeOldEvent"
        },
        {
          "$ref": "#/definitions/connectorEvent"
        },
        {
          "$ref": "#/definitions/scheduleEvent"
        }
      ]
    },
    "storeEvent": {
      "type": "object",
      "title": "Store event",
      "additionalProperties": false,
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "type": "string",
          "example": "store"
        },
        "event": {
          "type": "string",
          "description": "Event type",
          "example": "s3:ObjectCreated:*"
        }
      }
    },
    "connectorEvent": {
      "type": "object",
      "title": "Connector event",
      "additionalProperties": false,
      "required": [
        "connector"
      ],
      "properties": {
        "connector": {
          "type": "string",
          "example": "my-connector"
        }
      }
    },
    "storeOldEvent": {
      "type": "object",
      "deprecationMessage": "Not used anymore prefer using storeEvent instead",
      "title": "Legacy Advanced store event registration",
      "additionalProperties": false,
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Store name",
              "type": "string",
              "example": "store"
            },
            "event": {
              "type": "string",
              "description": "Event type",
              "example": "s3:ObjectCreated:*"
            }
          }
        }
      }
    },
    "scheduleEvent": {
      "title": "Schedule event",
      "type": "object",
      "required": [
        "schedule"
      ],
      "properties": {
        "schedule": {
          "description": "Cron format as a standard Unix cron. [Crontab guru](https://crontab.guru/) can help pick the right syntax.",
          "type": "string",
          "example": "* * * * *"
        },
        "data": {
          "type": "object",
          "description": "Event data, send with each schedule event",
          "example": {
            "your": "payload"
          }
        }
      }
    },
    "cloudeventEvent": {
      "title": "Cloudevent event",
      "type": "object",
      "required": [
        "cloudevent"
      ],
      "cloudevent": {
        "oneOf": [
          {
            "type": "object",
            "description": "Legacy format to express a cloudevent. Prefer using the simpler options.",
            "attributes": {
              "expression": {
                "type": "string",
                "title": "CEL expression filter",
                "description": "An expression formatted as [CEL](https://github.com/google/cel-spec/blob/master/doc/intro.md) where `event` is a variable bounded to the incoming event.",
                "example": "event.source == 'koyeb.com/gateway'"
              },
              "attributes": {
                "type": "object",
                "title": "An attribute matching filter",
                "description": "A key/value map that must match exactly with the event coming in.",
                "additionalProperties": true,
                "example": {
                  "event.source": "koyeb.com/gateway"
                }
              }
            }
          }
        ]
      }
    }
  }
}